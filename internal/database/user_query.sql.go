// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_query.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO ` + "`" + `user` + "`" + ` (username, password, name, email)
VALUES (?, ?, ? ,?)
`

type CreateUserParams struct {
	Username string
	Password string
	Name     string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Name,
		arg.Email,
	)
}

const findUserById = `-- name: FindUserById :one
SELECT id, created_at, updated_at, username, name, password, email
FROM ` + "`" + `user` + "`" + `
where id = ?
`

func (q *Queries) FindUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Name,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, created_at, updated_at, username, name, password, email
FROM ` + "`" + `user` + "`" + `
where username = ?
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Name,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const getAllUser = `-- name: GetAllUser :many
SELECT id, created_at, updated_at, username, name, password, email
FROM ` + "`" + `user` + "`" + `
`

func (q *Queries) GetAllUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Name,
			&i.Password,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
